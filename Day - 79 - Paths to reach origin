-------------------------------------------------------------------------------------------------------------------------------------->
Question -> Paths to reach origin ??
                                You are standing on a point (x, y) and you want to go to the origin (0, 0) by taking steps either left or down i.e.
                                from each point you are allowed to move either in (x-1, y) or (x, y-1). Find the number of paths from point to origin.
-------------------------------------------------------------------------------------------------------------------------------------->
Expected Time Complexity: O(x*y).
Expected Auxiliary Space: O(x*y).
-------------------------------------------------------------------------------------------------------------------------------------->
Example 1:

Input:
x = 3, y = 0 
Output: 
1
Explanation: Path used was -  (3,0)  --> ( 2,0) --> (1,0) --> (0,0).We can see that there is no other path than this, so we return 1.
-------------------------------------------------------------------------------------------------------------------------------------->
Example 2:

Input:
x = 3, y = 6
Output: 
84 
Explanation:
There are total 84 possible paths.
-------------------------------------------------------------------------------------------------------------------------------------->
class Solution
{
public:
    int dp[1001][1001];
    int mod = 1e9 + 7;
    int ncr(int n, int r){
        if(r == 0 ||  n == r) return 1;
        if( r == 1) return n;
        if(dp[n][r] != -1) return dp[n][r];
        return dp[n][r] = (ncr(n-1, r) + ncr(n -1, r -1))%mod;
        
    }
    int ways(int x, int y)
    {
        memset(dp, -1, sizeof(dp));
       return ncr(x + y, x);
    }
};
-------------------------------------------------------------------------------------------------------------------------------------->
Approach ->
           The given code is a solution to the problem of finding the number of ways to reach from one point (0, 0) to another point (x, y) in a grid.
           The only allowed movements are either moving right or moving up.
           To solve this problem, we use dynamic programming approach where we store the previously calculated values in an array for future use.
           This helps us avoid recalculating the same subproblems again and again.
           The function ncr(n,r) calculates the combination value of n choose r using recursion.
           It checks if r is equal to 0 or n which means there is only one way possible i.e., choosing all elements or not choosing any element respectively.
           If r equals 1 then there are n ways possible as each element can be chosen individually.
           Otherwise, it recursively calls itself by reducing both n and r by 1 until it reaches one of these base cases.
           In order to optimize our solution further, we also make use of modular arithmetic as large numbers may cause overflow while calculating combinations.
           Hence, after every addition operation in our recursive function, we take its modulo with a very large number (here mod = 10^9 +7).
           Finally, inside our main function "ways", we initialize dp array with -1 indicating that no values have been stored yet and call our helper function "ncr" passing x+y and x as parameters since total steps required will be x+y and out of those steps x should be towards right direction hence remaining
           The code is a solution to find the number of ways to reach from (0,0) to (x,y) in a grid by moving only right and down.
-------------------------------------------------------------------------------------------------------------------------------------->
