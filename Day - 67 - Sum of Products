------------------------------------------------------------------------------------------------------------------------------------------->
Question -> Sum of Products ??
                            Given an array arr[] of size n. Calculate the sum of Bitwise ANDs ie:
                            calculate sum of arr[i] & arr[j] for all the pairs in the given array
                            arr[] where i < j.
------------------------------------------------------------------------------------------------------------------------------------------->
Example 1:

Input:
n = 3
arr = {5, 10, 15}
Output:
15
Explanation:
The bitwise Ands of all pairs where i<j are (5&10) = 0, (5&15) = 5 and (10&15) = 10.
Therefore, the total sum = (0+5+10) = 15.
------------------------------------------------------------------------------------------------------------------------------------------->
Example 2:

Input:
n = 4
arr = {10, 20, 30, 40}
Output:
46
Explanation:
The sum of bitwise Ands 
of all pairs = (0+10+8+20+0+8) = 46.
------------------------------------------------------------------------------------------------------------------------------------------->
class Solution {
  public:
    long long pairAndSum(int n, long long arr[])
    {
        // code here
        long long ans = 0;
        int sum = 0;
        for(int i=0;i<32;i++)
        {
           int count = 0;
           for(int j=0;j<n;j++)
           {
               if(arr[j]&(1<<i))
               {
                   count++;
               }
           }
           sum += (count*(count-1)/2 * 1 << i);
            }
            return sum;
    }
};
------------------------------------------------------------------------------------------------------------------------------------------->
Approach -> 
         The given code is used to find the sum of all possible pairs in an array of integers.
         The function takes two parameters, n which represents the size of the array and arr which is the actual array.
         Firstly, a variable ans is initialized to 0.
         This variable will store the final answer.
         Next, a for loop is used to iterate through each bit position from 0 to 31 (since we are dealing with 32-bit integers).
         Inside this loop, another variable k is initialized to 0.
         This variable will count the number of elements in the array that have their ith bit set (i.e., equal to 1).
         Now, within this inner loop, another for loop iterates through each element in the given array.
         If an element has its ith bit set (using bitwise AND operation), then k is incremented by one.
         After counting all such elements with their ith bit set, we use a formula ((k)*(k-1))/2) to calculate how many pairs can be formed using these elements.
         For example, if there are three elements with their ith bit set (say i=3), then there can be three possible pairs - {a,b}, {b,c}, and {c,a}.
         Hence we divide k*(k-1) by two since order does not matter in forming pairs.
         Finally, we multiply this value by (1<<i) and add it to our ans variable.
         Here << represents left shift operator which shifts bits towards left by
         The code attempts to calculate the sum of all possible pairs of elements in an array, where each element is represented in binary form 
         and the sum is calculated by counting the number of ones in each bit position and multiplying it by 2 raised to that bit position.
------------------------------------------------------------------------------------------------------------------------------------------->
