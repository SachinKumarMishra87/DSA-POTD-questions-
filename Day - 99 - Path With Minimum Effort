-------------------------------------------------------------------------------------------------------------------------------------->
Question -> Path With Minimum Effort ??
                      You are a hiker preparing for an upcoming hike. You are given heights[][], a 2D array of size rows x columns,
                      where heights[row][col] represents the height of cell (row, col). You are situated in the top-left cell, (0, 0), and
                      you hope to travel to the bottom-right cell, (rows-1, columns-1) (i.e., 0-indexed). You can move up, down, left, or
                      right, and you wish to find the route with minimum effort.
                      
Note: A route's effort is the maximum absolute difference in heights between two consecutive cells of the route.
-------------------------------------------------------------------------------------------------------------------------------------->
Expected Time Complexity: O(rowsxcolumns)
Expected Space Complexity: O(rowsxcolumns)
-------------------------------------------------------------------------------------------------------------------------------------->
Example 1:

Input:
row = 3
columns = 3 
heights = [[1,2,2],[3,8,2],[5,3,5]]
Output: 
2
Explaination: 
The route 1->3->5->3->5 has a maximum absolute difference of 2 in consecutive cells. This is better than the 
route 1->2->2->2->5, where the maximum absolute difference is 3.
-------------------------------------------------------------------------------------------------------------------------------------->
Example 2:

Input:
row = 2
columns = 2 
heights = [[7,7],[7,7]]
Output: 
0
Explaination: 
Any route from the top-left cell to the bottom-right cell has a maximum absolute difference of 0 in consecutive cells.
-------------------------------------------------------------------------------------------------------------------------------------->
class Solution {
  public:
    bool possible(vector<vector<int>> &height, int k){
        queue<pair<int, int>> q;
        q.push({0, 0});
        vector<vector<int>> visited(height.size(), vector<int>(height[0].size(), 0));
        while(!q.empty()){
            int i = q.front().first;
            int j = q.front().second;
            q.pop();
            if(i == height.size()-1 && j == height[0].size() - 1) return true;
            if( i + 1 < height.size() && abs(height[i][j] - height[i+1][j]) <= k && !visited[i+1][j]){
                visited[i+1][j] = 1;
                q.push({i+1, j});
            }
            if( j + 1 < height[0].size() && abs(height[i][j] - height[i][j+1]) <= k && !visited[i][j+1]){
                visited[i][j+1] = 1;
                q.push({i, j+1});
            }
            if( i > 0 && abs(height[i][j] - height[i-1][j]) <= k && !visited[i-1][j]){
                visited[i-1][j] = 1;
                q.push({i-1, j});
            }
            if( j > 0 && abs(height[i][j] - height[i][j-1]) <= k && !visited[i][j-1]){
                visited[i][j-1] = 1;
                q.push({i, j-1});
            }
        }
        return false;
    }
    int MinimumEffort(int rows, int columns, vector<vector<int>> &heights) {
        int start = 0, end = 1e6, ans = 1e6;
        while(start <= end){
            int mid = start + (end - start)/2;
            if(possible(heights, mid)){
                ans = mid;
                end = mid - 1;
            }else start = mid + 1;
        }
        return ans;
    }
};
-------------------------------------------------------------------------------------------------------------------------------------->
Approach ->
        This code is trying to find the minimum effort required to traverse from the top-left corner of a 2D grid to the bottom-right corner.
        The effort is defined as the maximum absolute difference in height between adjacent cells along the path. The code uses a binary search
        approach to find the minimum effort required.

        Let's break down the code:
        
        bool possible(vector<vector<int>> &height, int k): This function takes a 2D vector height representing the heights of each cell 
        in the grid and an integer k representing the maximum allowed height difference. It returns a boolean value indicating whether 
        it's possible to traverse from the top-left corner to the bottom-right corner without exceeding the maximum height difference k.
        It uses a breadth-first search (BFS) algorithm.
        
        queue<pair<int, int>> q: This is a queue of pairs representing the indices (i, j) of cells to be visited during BFS. It starts
        with the top-left corner (0, 0).
        
        vector<vector<int>> visited(height.size(), vector<int>(height[0].size(), 0)): This 2D vector is used to mark visited cells to
        avoid revisiting them during BFS.
        
        while(!q.empty()): This loop continues until all reachable cells are visited.
        
        int i = q.front().first; int j = q.front().second; q.pop(): Extracts the indices of the current cell from the front of the queue
        and removes it from the queue.
        
        if(i == height.size()-1 && j == height[0].size() - 1) return true;: Checks if the current cell is the bottom-right corner. If so,
        it returns true indicating that the traversal is possible.
        
        Neighboring cell checks: Checks the neighboring cells in all four directions (up, down, left, right). If the neighboring cell
        satisfies the conditions (within bounds, height difference less than or equal to k, and not visited before), it marks it as visited
        and adds it to the queue for further exploration.
        
        return false: If the loop finishes without finding a path to the bottom-right corner, it returns false, indicating that traversal is
        not possible within the given constraints.
        
        int MinimumEffort(int rows, int columns, vector<vector<int>> &heights): This function takes the number of rows, columns, and the 2D
        vector heights representing the grid. It returns the minimum effort required to traverse from the top-left to the bottom-right corner.
        
        Binary search: It initializes start as 0 and end as a large value (1e6 in this case), and performs a binary search on the range of 
        possible efforts. It updates ans with the current mid if traversal is possible with that effort, and adjusts the range accordingly.
        
        Returns ans: Once the binary search finishes, it returns the minimum effort found.
-------------------------------------------------------------------------------------------------------------------------------------->
