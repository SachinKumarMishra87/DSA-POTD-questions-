-------------------------------------------------------------------------------------------------------------------------------------->
Question ->Root to Leaf Paths ??
                                    Given a Binary Tree of nodes, you need to find all the possible paths from the root node to all the 
                                    leaf nodes of the binary tree.
-------------------------------------------------------------------------------------------------------------------------------------->
Expected Time Complexity: O(n)
Expected Auxiliary Space: O(height of the tree)
-------------------------------------------------------------------------------------------------------------------------------------->
Example 1:

Input:
       1
    /     \
   2       3
Output: 
1 2 
1 3 
Explanation: 
All possible paths:
1->2
1->3
-------------------------------------------------------------------------------------------------------------------------------------->
Example 2:

Input:
         10
       /    \
      20    30
     /  \
    40   60
Output: 
10 20 40 
10 20 60 
10 30 
-------------------------------------------------------------------------------------------------------------------------------------->
class Solution {
  public:
     vector<vector<int>> ans;
  void solve(Node*root,vector<int>&temp)
  {
      if(root==NULL) return ;
      
      if(root->left==NULL and root->right==NULL){
          temp.push_back(root->data);
          ans.push_back(temp);
           temp.pop_back();
          return;
      }
      
      temp.push_back(root->data);
      
      solve(root->left,temp);
    
   
      solve(root->right,temp);
      if(!temp.empty())
      temp.pop_back();
  }
  
    vector<vector<int>> Paths(Node* root) {
        // code here
        vector<int> temp;
        solve(root,temp);
        return ans;
    }
};
-------------------------------------------------------------------------------------------------------------------------------------->
Approach ->
      This code is designed to find all paths from the root to leaf nodes in a binary tree and store them in a vector of vectors.


      Function Paths:
      This function takes a pointer to the root of the binary tree as input.
      It initializes an empty vector temp.
      It calls the solve function with the root node and the empty temp vector to start the traversal.

      Function solve:
      This function takes two parameters: a pointer to a Node (representing the current node in the traversal) and a reference to a vector temp (representing the current path from the root to the current node).
      If the current node is NULL, the function returns, as there's nothing to process.
      If the current node is a leaf node (i.e., it has no left or right child), it adds the current node's data to the temp vector, pushes temp into the ans vector (which stores all paths), and then removes the last element from temp (to backtrack and explore other paths).
      If the current node is not a leaf node, it adds the current node's data to the temp vector and recursively calls the solve function for its left and right children.
      After processing both children, if the temp vector is not empty, it removes the last element from temp. This step ensures that when the function backtracks to explore other paths, it doesn't carry the data of the current node in the path.

      After the traversal is complete, it returns the ans vector, which contains all the paths from the root to leaf nodes.
-------------------------------------------------------------------------------------------------------------------------------------->
