------------------------------------------------------------------------------------------------------------------------------------------->
Question -> Xoring and Clearing ??
                        You are given an array arr[] of size n. You need to do the following:
                       1: You need to calculate the bitwise XOR of each element in the array with its corresponding index (indices start from 0).
                       2: After step1, print the array.
                       3: Now, set all the elements of arr[] to zero.
                       4: Now, print arr[].
------------------------------------------------------------------------------------------------------------------------------------------->
Example 1:

Input:
n = 10
arr[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
Output:
1 3 1 7 1 3 1 15 1 3
0 0 0 0 0 0 0 0 0 0
Explanation:
First we take xor of every element with
their indices, like (1xor0), (2xor1), (3xor2), (4xor3) and so on.
Now print the resultant array
Now set all the elements of array to zero
Now print the resultant array
------------------------------------------------------------------------------------------------------------------------------------------->
Example 2:

Input:
n = 4
arr[] = {10, 20, 30, 40}
Output:
10 21 28 43
0 0 0 0
Explanation:
First we take xor of every element with
their indices, like (1xor0), (2xor1), (3xor2).
Now print the resultant array
Now set all the elements of array to zero
Now print the resultant array
------------------------------------------------------------------------------------------------------------------------------------------->

class Solution {
  public:
    void printArr(int n, int arr[])
    {
        // Your code for printing array here
        for(int i = 0; i < n; i++)
        {
            cout<<arr[i]<<" ";
        }
        cout<<endl;
    }
    
    void setToZero(int n, int arr[])
    {
        // Use memset to set arr to zero
        for(int i = 0; i < n; i++)
        {
            arr[i] = 0;
        }
    }

    void xor1ToN(int n, int arr[])
    {
        // Xor arr[i]^i

        for(int i = 0; i < n; i++)
        {
            arr[i] = (arr[i] ^ i);
        }

    }
};
------------------------------------------------------------------------------------------------------------------------------------------->
Approach ->
           The code is a simple C++ program that performs basic operations on an array.
           The main function takes in two inputs - the size of the array and the elements of the array.
           It then calls three functions - printArr, setToZero, and xor1ToN.
           The first function, printArr, simply prints out all the elements of the array using a for loop.
           This demonstrates how to access individual elements of an array using their index.
           The second function, setToZero, uses memset to set all elements of the array to zero.
           Memset is a built-in C++ function that allows us to initialize blocks of memory with a specific value.
           In this case, we are setting all values in our array to zero.
           Finally, xor1ToN performs an XOR operation between each element in the array and its corresponding index (i.e., arr[i]^i).
           XOR stands for "exclusive or" and it is a logical operator that returns true only when one but not both operands are true.
           In this case, we are essentially flipping every bit at even positions (since i will be even) in our binary representation which results in adding 1 to each element at odd positions (since i will be odd).
           This operation can also be thought as adding 1 if ith bit is unset else subtracting 1 from result since XOR with same number gives 0 as output.
           This concept highlights how bitwise operators work on individual bits rather than whole numbers.
           In conclusion, this code demonstrates
           The code attempts to print an array, set all its elements to zero, and then perform a bitwise XOR operation on each element with its index.
------------------------------------------------------------------------------------------------------------------------------------------->
