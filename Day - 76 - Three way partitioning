-------------------------------------------------------------------------------------------------------------------------------------->
Question -> Three way partitioning ??
                                Given an array of size n and a range [a, b]. The task is to partition the array around the range such that the array is divided into three parts.
                                1) All elements smaller than a come first.
                                2) All elements in range a to b come next.
                                3) All elements greater than b appear in the end.
                                The individual elements of three sets can appear in any order. You are required to return the modified array.2
Note: The generated output is 1 if you modify the given array successfully.

Geeky Challenge: Solve this problem in O(n) time complexity.
-------------------------------------------------------------------------------------------------------------------------------------->
Expected Time Complexity: O(n)
Expected Auxiliary Space: O(1)
-------------------------------------------------------------------------------------------------------------------------------------->
Example 1:

Input: 
n = 5
array[] = {1, 2, 3, 3, 4}
[a, b] = [1, 2]
Output: 
1
Explanation: 
One possible arrangement is: {1, 2, 3, 3, 4}. If you return a valid arrangement, output will be 1.
-------------------------------------------------------------------------------------------------------------------------------------->
Example 2:

Input: 
n = 6 
array[] = {1, 4, 3, 6, 2, 1}
[a, b] = [1, 3]
Output: 
1
Explanation: 
One possible arrangement is: {1, 3, 2, 1, 4, 6}. If you return a valid arrangement, output will be 1.
-------------------------------------------------------------------------------------------------------------------------------------->
class Solution{   
public:
    void threeWayPartition(vector<int>& array,int a, int b)
    {
        int n = array.size();
        int low = 0, mid = 0, high = n - 1;
        while (mid <= high) {
            if (array[mid] < a) {
                swap(array[low], array[mid]);
                low++;
                mid++;
            } else if (array[mid] > b) {
                swap(array[mid], array[high]);
                high--;
            } else {
                mid++;
            }
        }
    }
};
-------------------------------------------------------------------------------------------------------------------------------------->
Approach ->
             The code is implementing a three-way partitioning algorithm, which is used to sort an array with three distinct values.
             In this case, the values are represented by variables 'a' and 'b'.
             The goal of the algorithm is to rearrange the elements in such a way that all elements less than 'a' appear before all elements between 'a' and 'b', and finally all elements greater than 'b'.
             To achieve this, we first initialize three pointers - low, mid and high.
             Low points to the beginning of the array, mid starts from 0 as well, while high points to the end of the array.
             We then start iterating through the array using mid pointer.
             At each step, we check if element at index mid is less than value represented by variable a.
             If it is so, we swap it with element at index low (which represents first element that should be smaller than a).
             We also increment both low and mid pointers since they now point to correct positions.
             If element at index mid falls between values represented by variables a and b (inclusive), then we simply increment our pointer without swapping any elements.
             Finally if element at index mid is greater than value represented by variable b, then we swap it with last unsorted element pointed by high pointer.
             After swapping we decrement only high pointer because swapped value might still need further sorting.
             This process continues until our middle pointer reaches or crosses over our rightmost boundary i.e., when there are no more unsorted elements left
             The code attempts to partition the given array into three parts such that all elements less than 'a' are placed at the beginning, all elements greater than 'b' are placed at the end, and all elements between 'a' and 'b' are placed in the middle.
-------------------------------------------------------------------------------------------------------------------------------------->
