-------------------------------------------------------------------------------------------------------------------------------------->
Question -> Construct Binary Tree from Inorder and Postorder ??
                              Given inorder and postorder traversals of a binary tree(having n nodes) in the arrays in[] and post[] respectively.
                              The task is to construct a binary tree from these traversals.
                              
                              Driver code will print the preorder traversal of the constructed tree.
-------------------------------------------------------------------------------------------------------------------------------------->
Expected Time Complexity: O(n2)
Expected Auxiliary Space: O(n)
-------------------------------------------------------------------------------------------------------------------------------------->
Example 1:

Input:
n = 8
in[] = {4, 8, 2, 5, 1, 6, 3, 7}
post[] = {8, 4, 5, 2, 6, 7, 3, 1}
Output: 
1 2 4 8 5 3 6 7
Explanation: 
For the given postorder and inorder traversal of tree the  resultant binary tree will be
          1
       /      \
     2        3
   /  \      /  \
  4   5    6   7
   \
    8
-------------------------------------------------------------------------------------------------------------------------------------->
Example 2:

Input:
n = 5
in[] = {9, 5, 2, 3, 4}
post[] = {5, 9, 3, 4, 2}
Output: 
2 9 5 4 3
Explanation:  
The  resultant binary tree will be
           2
        /     \
       9      4
        \     /
         5   3
-------------------------------------------------------------------------------------------------------------------------------------->
class Solution
{
    public:

    //Function to return a tree created from postorder and inoreder traversals.
    Node *buildTree(int in[], int post[], int n)
    {
        
        // Your code here
        // Base case: If no nodes, return nullptr
        if (n == 0) {
            return nullptr;
        }

        // Find the root node index in inorder traversal
        int rootIndex = 0;
        while (rootIndex < n && in[rootIndex] != post[n - 1]) {
            rootIndex++;
        }

        // Create the root node with the value from postorder traversal
        Node* root = new Node(post[n - 1]);

        // Recursively build left subtree using elements before root in inorder traversal
        Node* leftSubtree = buildTree(in, post, rootIndex);

        // Recursively build right subtree using elements after root in inorder traversal
        Node* rightSubtree = buildTree(in + rootIndex + 1, post + rootIndex, n - rootIndex - 1);

        // Connect left and right subtrees to the root node
        root->left = leftSubtree;
        root->right = rightSubtree;

        return root;
    }
    
};
-------------------------------------------------------------------------------------------------------------------------------------->
Approach ->
        This code is a C++ function to construct a binary tree from its inorder and postorder traversal sequences. Here's how it works:

        The function buildTree takes three arguments:
        in[] represents the inorder traversal sequence of the binary tree.
        post[] represents the postorder traversal sequence of the binary tree.
        n represents the number of nodes in the binary tree.
        The base case of the recursion is when there are no nodes (n == 0). In this case, it returns nullptr (null pointer).
        It finds the root node of the tree using the last element of the postorder traversal sequence. It iterates through the inorder
        traversal sequence to find the index (rootIndex) of the root node.
        It creates a new node (root) with the value of the root node found in the postorder traversal sequence.
        It recursively builds the left subtree using elements before the root node in the inorder traversal sequence. This is done by calling
        the buildTree function with appropriate arguments.
        It recursively builds the right subtree using elements after the root node in the inorder traversal sequence. This is also done by 
        calling the buildTree function with appropriate arguments.
        Finally, it connects the left and right subtrees to the root node and returns the root of the constructed binary tree.
        This function follows the logic that in a postorder traversal, the last element is always the root, and by finding this root in 
        the inorder traversal, you can divide the tree into left and right subtrees. Then, recursively applying the same logic on the 
        left and right subtrees constructs the entire binary tree.
-------------------------------------------------------------------------------------------------------------------------------------->
