-------------------------------------------------------------------------------------------------------------------------------------->
Question -> K closest elements ??
              Given a sorted array of unique elements in increasing order, arr[] of n integers, and a value x. Find the K 
              elements to x in arr[].
              Keep the following points in mind:
              
              If x is present in the array, then it need not be considered.
              If two elements have the same difference as x, the greater element is prioritized.
              If sufficient elements are not present on the right side, take elements from the left and vice versa.

-------------------------------------------------------------------------------------------------------------------------------------->
Expected Time Complexity: O(log n + k)
Expected Auxiliary Space: O(k)
-------------------------------------------------------------------------------------------------------------------------------------->
Example 1:

Input:
n = 13
arr[] = {12, 16, 22, 30, 35, 39, 42, 
         45, 48, 50, 53, 55, 56}
k = 4, x = 35
Output: 39 30 42 45
Explanation: 
First closest element to 35 is 39.
Second closest element to 35 is 30.
Third closest element to 35 is 42.
And fourth closest element to 35 is 45.
-------------------------------------------------------------------------------------------------------------------------------------->
Example 2:

Input:
x = 2, n = 6, m = 10
Output:
4
Explanation:
26 = 64. 64 % 10 = 4.
-------------------------------------------------------------------------------------------------------------------------------------->
class Solution {
  public:
    int binarySearch(vector<int> &arr, int low, int high, int x) {
        while(low <= high) {
            int mid = low + (high - low) / 2;
            if(arr[mid] == x)
                return mid;
            else if(arr[mid] < x)
                low = mid + 1;
            else
                high = mid - 1;
        }
        
        return low;
    }

    vector<int> printKClosest(vector<int> &arr, int n, int k, int x) {
        int position = binarySearch(arr, 0, n - 1, x);
        int left = position - 1, right = position;
        vector<int> res;
        
        if(right < n and arr[right] == x)
            right++;
        
        while(k > 0 and left >= 0 and right < n) {
            int leftDiff = abs(arr[left] - x);
            int rightDiff = abs(arr[right] - x);
            
            if(leftDiff < rightDiff) 
                res.push_back(arr[left--]);
            
            else if(leftDiff > rightDiff) 
                res.push_back(arr[right++]);
            
            else {
                if(arr[right] > arr[left]) 
                    res.push_back(arr[right++]);
                else 
                    res.push_back(arr[left--]);
            }
            
            k--;
        }
        
        while(k > 0 and left >= 0) {
            res.push_back(arr[left--]);
            k--;
        }
        
        while(k > 0 and right < n) {
            res.push_back(arr[right++]);
            k--;
        }
            
        return res;
    }
};
-------------------------------------------------------------------------------------------------------------------------------------->
Approach ->
       Certainly! Here is an explanation of the approach used in the provided code:

        Objective:
        To find the k closest elements to a given value x in a sorted array arr of size n.
        
        Approach:
        Binary Search for Insertion Point:
        
        Use the binarySearch function to find the position where x would be inserted in the sorted array arr to maintain the order. This function returns the index of x if found, otherwise the index where x would be inserted.
        Initialize Pointers:
        
        Initialize two pointers, left and right, around the position returned by the binary search.
        left is set to position - 1 and right is set to position.
        Adjust Right Pointer if x is Found:
        
        If x is found at the position, increment the right pointer to skip the element x.
        Find k Closest Elements:
        
        Use a while loop to find the k closest elements by comparing the differences between x and the elements pointed to by left and right.
        If the element at left is closer to x than the element at right, add the element at left to the result and decrement left.
        If the element at right is closer to x than the element at left, add the element at right to the result and increment right.
        If both elements are equally close to x, add the element at right if it is greater, otherwise add the element at left.
        Handle Remaining Elements:
        
        If there are still elements to add (i.e., k is not zero), add the remaining elements from the left side if left is within bounds.
        If there are still elements to add and left is out of bounds, add the remaining elements from the right side if right is within bounds.
        Return Result:
        
        Return the result vector containing the k closest elements.
-------------------------------------------------------------------------------------------------------------------------------------->
