-------------------------------------------------------------------------------------------------------------------------------------->
Question -> K-Palindrome ??
          Given a string str of length n, find if the string is K-Palindrome or not. A k-palindrome string transforms into a palindrome 
          on removing at most k characters from it.
-------------------------------------------------------------------------------------------------------------------------------------->
Expected Time Complexity: O(n*n)
Expected Auxiliary Space: O(n*n)
-------------------------------------------------------------------------------------------------------------------------------------->
Example 1:

Input: str = "abcdecba"
n = 8, k = 1
Output: 1
Explaination: By removing 'd' or 'e' 
we can make it a palindrome.
-------------------------------------------------------------------------------------------------------------------------------------->
Example 2:

Input: str = "abcdefcba"
n = 9, k = 1
Output: 0
Explaination: By removing a single 
character we cannot make it a palindrome.
-------------------------------------------------------------------------------------------------------------------------------------->
class Solution{
public:
    int solve(int l, int r, string& str,vector<vector<int>>&dp)
    {

      if(l>=r)return 0;

    if(dp[l][r] != -1)return dp[l][r];

     if(str[l] == str[r])return dp[l][r]= solve(l+1, r-1, str,dp);

      return dp[l][r] = min(solve(l+1 , r , str,dp),solve(l,r-1,str,dp))+1;                       

  }

 int kPalindrome(string str, int n, int k){

        vector<vector<int>> dp(n, vector<int>(n, -1));

     return k >= solve(0,n-1,str,dp);

    }
};
-------------------------------------------------------------------------------------------------------------------------------------->
Approach ->
      Certainly! Here's the approach used in the provided code:

        Objective:
        The objective of the kPalindrome function is to determine whether it is possible to convert the given string
        str into a palindrome by changing at most k characters.
        
        Approach:
        Recursive Function for Minimum Changes:
        
        Define a recursive function solve to calculate the minimum number of changes required to make a substring from index 
        l to r of the string str a palindrome.
        Base cases:
        If l >= r, the substring is empty or has only one character, so no changes are needed (return 0).
        If the value for dp[l][r] is already calculated (not equal to -1), return it.
        Recursive cases:
        If the characters at positions l and r are the same (str[l] == str[r]), no changes are needed for these characters. 
        Recur for the substring excluding these characters (solve(l+1, r-1, str, dp)).
        If the characters at positions l and r are different, we need to make a change for one of them to match the other
        character. We have two options:
        Remove the character at position l (solve(l+1, r, str, dp)) and recur for the substring from l+1 to r.
        Remove the character at position r (solve(l, r-1, str, dp)) and recur for the substring from l to r-1.
        Return the minimum of these two options plus 1 (to account for the current change).
        Memoization with DP Array:
        
        Use a 2D DP array dp to store the results of subproblems. Initialize all values to -1 to indicate that they are not
        yet calculated.
        Update dp[l][r] with the result of each subproblem to avoid redundant calculations.
        Main Function kPalindrome:
        
        Initialize the DP array dp.
        Call the solve function to get the minimum number of changes required for the entire string (solve(0, n-1, str, dp)).
        Check if the minimum number of changes required is less than or equal to k. If so, return true (1), indicating that 
        it is possible to convert the string into a palindrome with at most k changes. Otherwise, return false (0).
-------------------------------------------------------------------------------------------------------------------------------------->
