------------------------------------------------------------------------------------------------------------------------------------------>
Question -> Optimal Strategy For A Game 
=>
You are given an array arr of size n. The elements of the array represent n coin of values v1, v2, ....vn. You play against an opponent in an alternating way. In each turn, a player selects either the first or last coin from the row, removes it from the row permanently, and receives the value of the coin.
You need to determine the maximum possible amount of money you can win if you go first.
Note: Both the players are playing optimally.
------------------------------------------------------------------------------------------------------------------------------------------>
Example 1:

Input:
n = 4
arr[] = {5, 3, 7, 10}
Output: 
15
Explanation: The user collects maximum
value as 15(10 + 5). It is guarantee that we cannot get more than 15 by any possible moves.
------------------------------------------------------------------------------------------------------------------------------------------>
Example 2:

Input:
n = 4
arr[] = {8, 15, 3, 7}
Output: 
22
Explanation: The user collects maximum
value as 22(7 + 15). It is guarantee that we cannot get more than 22 by any possible moves.

----------------------------SolluTion-------------------------------------------------------------------------------------------------------------->
class Solution{
    public:
    long long maximumAmount(int n, int arr[]){
        // Your code here
        int dp[n][n];
        memset(dp,0,sizeof(dp));
        for(int i=0;i<n;i++){
            dp[i][i]=arr[i];
        }
        for(int i=0;i<n-1;i++){
            dp[i][i+1]=max(arr[i], arr[i+1]);
        }
        for(int g=2;g<n;g++){
            for(int i=0;i+g<n;i++){
                int j=g+i;
                dp[i][j]=max(arr[i]+min(dp[i+2][j], dp[i+1][j-1]), arr[j]+min(dp[i+1][j-1], dp[i][j-2]));
            }
        }
        return dp[0][n-1];
    }
};
------------------------------------------------------------------------------------------------------------------------------------------>
Approach -> 
           The code is trying to find the maximum amount of money that can be collected by playing a game with a given set of numbers.
           The game involves two players taking turns choosing one number from either end of the array and adding it to their total.
           The player with the highest total at the end wins.
           To solve this problem, dynamic programming is used.
           This means breaking down the problem into smaller subproblems and storing their solutions in an array so they can be reused later.
           The first step is to initialize a 2D array called dp which will store the solutions for all possible subarrays.
           Each element in this array represents the maximum amount that can be collected by starting at index i and ending at index j.
           Next, we fill in values for all single-element subarrays (i.e., when i=j).
           This simply involves setting each element equal to its corresponding value from arr.
           Then, we fill in values for all two-element subarrays (i.e., when j=i+1).
           For these cases, we choose whichever number gives us a higher total - either arr[i] or arr[j].
           Finally, we use nested loops to iterate through larger subarray sizes (g) starting from 3 up until n-1 (since there are no more than n-1 elements between any two indices).
           Within these loops, we calculate dp[i][j] using previously calculated values stored in dp[i+2][j], dp[i+1][j-1], and dp[i][j
           The code attempts to find the maximum possible amount that can be won by a player in a game, given an array of numbers representing the values of coins.
------------------------------------------------------------------------------------------------------------------------------------------>
