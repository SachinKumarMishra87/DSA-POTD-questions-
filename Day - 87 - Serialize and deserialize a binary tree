-------------------------------------------------------------------------------------------------------------------------------------->
Question -> Serialize and deserialize a binary tree ??
                              Serialization is to store a tree in an array so that it can be later restored and deserialization is reading tree back from the array. 
                              Complete the functions
                              
                              serialize() : stores the tree into an array a and returns the array.
                              deSerialize() : deserializes the array to the tree and returns the root of the tree.
                              Note: Multiple nodes can have the same data and the node values are always positive integers. Your code will be correct
                              if the tree returned by deSerialize(serialize(input_tree)) is same as the input tree. Driver code will print the in-order
                              traversal of the tree returned by deSerialize(serialize(input_tree)).
-------------------------------------------------------------------------------------------------------------------------------------->
Expected Time Complexity: O(Number of nodes).
Expected Auxiliary Space: O(Number of nodes).
-------------------------------------------------------------------------------------------------------------------------------------->
Example 1:

Input:
      1
    /   \
   2     3
Output: 
2 1 3
-------------------------------------------------------------------------------------------------------------------------------------->
Example 2:

Input:
         10
       /    \
      20    30
    /   \
   40  60
Output: 
40 20 60 10 30
-------------------------------------------------------------------------------------------------------------------------------------->
class Solution
{
    public:
    //Function to serialize a tree and return a list containing nodes of tree.
        //Your code here
    void solve(Node* root,vector<int>&ans){
        
        if(root==NULL)
        return;
        
        solve(root->left,ans);
        ans.push_back(root->data);
        solve(root->right,ans);
        
    }
    //Function to serialize a tree and return a list containing nodes of tree.
    vector<int> serialize(Node *root) 
    {
        
        vector<int>ans;
        solve(root,ans);
        return ans;
        
    }
    Node *func(vector<int>&A,int is,int ie){
        
        if(is>ie)
        return NULL;
        int  mid=(is+ie)/2;
        Node *root=new Node(A[mid]);
        
        root->left=func(A,is,mid-1);
        root->right=func(A,mid+1,ie);
        return root;
    }
    //Function to deserialize a list and construct the tree.
    Node * deSerialize(vector<int> &A)
    {
        return func(A,0,A.size()-1);
    }

};
-------------------------------------------------------------------------------------------------------------------------------------->
Approach ->
          Serialization (Serialize function):
          Traverse the binary tree in any order (preorder, inorder, or postorder).
          Store the data of each node in a list.
          Return the list.
          Deserialization (deSerialize function):
          Define a helper function that constructs the binary tree recursively.
          Take the serialized list and its boundaries (start index, end index).
          If the start index is greater than the end index, return NULL (indicating an empty subtree).
          Calculate the middle index (is + ie) / 2.
          Create a new node with the value at the middle index.
          Recursively call the helper function for the left subtree with boundaries (is, mid - 1).
          Recursively call the helper function for the right subtree with boundaries (mid + 1, ie).
          Return the root node.
          Helper Function:
          The helper function constructs the binary tree recursively.
          It takes the serialized list and the boundaries of the current subtree.
          Base case: if start index is greater than end index, return NULL.
          Calculate the middle index.
          Create a new node with the value at the middle index.
          Recursively call the helper function for the left subtree with updated boundaries (is, mid - 1).
          Recursively call the helper function for the right subtree with updated boundaries (mid + 1, ie).
          Return the root node.
-------------------------------------------------------------------------------------------------------------------------------------->
