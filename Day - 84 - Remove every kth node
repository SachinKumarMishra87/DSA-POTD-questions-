-------------------------------------------------------------------------------------------------------------------------------------->
Question -> Remove every kth node ??
                                Given a singly linked list having n nodes, your task is to remove every kth node from the linked list. 
-------------------------------------------------------------------------------------------------------------------------------------->
Expected Time Complexity :  O(n)
Expected Auxiliary Space :  O(1)
-------------------------------------------------------------------------------------------------------------------------------------->
Example 1:

Input:
n = 8
linked list: 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7 -> 8 
k = 2
Output: 
1 -> 3 -> 5 -> 7
Explanation: 
After removing every 2nd node of the linked list, the resultant linked list will be: 1 -> 3 -> 5 -> 7.
-------------------------------------------------------------------------------------------------------------------------------------->
Example 2:

Input:
n = 10
linked list: 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7 -> 8 -> 9 -> 10 
k = 3
Output: 
1 -> 2 -> 4 -> 5 -> 7 -> 8 -> 10
Explanation: 
After removing every 3rd node of the linked list, the resultant linked list will be: 1 -> 2 -> 4 -> 5 -> 7 -> 8 -> 10.
-------------------------------------------------------------------------------------------------------------------------------------->
class Solution {
    public:
    Node* deleteK(Node *head,int k){
      //Your code here
      if(k == 1){
          return NULL;
      }
      
      bool __isStarted{false};
      int cnt{0};
      Node* ptr{head};
      while(ptr){
          ++cnt;
          if((cnt + 1)%k == 0){
              if(ptr){
                  ptr->next ? ptr->next = ptr->next->next : ptr->next = NULL;
              }
              ++cnt;
          }
          ptr = ptr->next;
      }
      ptr = NULL;
      return head;
    }
};
-------------------------------------------------------------------------------------------------------------------------------------->
Approach ->
         The code is trying to delete every kth node from a given linked list.
         It takes in the head of the linked list and an integer k as parameters.
         First, it checks if k is equal to 1.
         If so, it returns NULL because there would be no nodes left in the linked list after deleting every first node.
         Next, it initializes a boolean variable __isStarted to false and an integer cnt to 0.
         These variables will be used later on for keeping track of the current position in the linked list.
         Then, it creates a pointer called ptr that points to the head of the linked list.
         This pointer will be used for traversing through the linked list.
         A while loop is then started which runs until ptr becomes NULL (which means we have reached the end of our linked list).
         Inside this loop, we increment cnt by 1 each time and check if (cnt + 1) % k == 0.
         This condition checks if we have reached a multiple of k nodes starting from index 1 (since cnt starts at index 0).
         If this condition is true, then we know that we need to delete this particular node since it falls on a multiple of k position.
         Inside this if statement, another check is done to make sure that ptr exists before attempting any operations on it.
         Then, depending on whether or not there exists another node after ptr->next (ptr's next), its next pointer is either set to point towards two nodes ahead or simply set
         The code attempts to delete every kth node from the linked list.
-------------------------------------------------------------------------------------------------------------------------------------->
