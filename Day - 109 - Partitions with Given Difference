-------------------------------------------------------------------------------------------------------------------------------------->
Question -> Partitions with Given Difference ??
          Given an array arr, partition it into two subsets(possibly empty) such that each element must belong to only one subset.
          Let the sum of the elements of these two subsets be S1 and S2. 
          Given a difference d, count the number of partitions in which S1 is greater than or equal to S2 and the
          difference between S1 and S2 is equal to d. Since the answer may be large return it modulo 109 + 7.
-------------------------------------------------------------------------------------------------------------------------------------->
Expected Time Complexity: O( n*sum(arr))
Expected Space Complexity: O( sum(arr))
-------------------------------------------------------------------------------------------------------------------------------------->
Example 1:

Input:
n = 4
d = 3
arr[] =  { 5, 2, 6, 4}
Output: 1
Explanation:
There is only one possible partition of this array. Partition : {6, 4}, {5, 2}. The subset difference between subset sum is: (6 + 4) - (5 + 2) = 3.
-------------------------------------------------------------------------------------------------------------------------------------->
Example 2:

Input:
n = 4
d = 0 
arr[] = {1, 1, 1, 1} 
Output: 6 
Explanation:
we can choose two 1's from indices {0,1}, {0,2}, {0,3}, {1,2}, {1,3}, {2,3} and put them in S1 and remaning two 1's in S2.
Thus there are total 6 ways for partition the array arr. 
-------------------------------------------------------------------------------------------------------------------------------------->
class Solution {
  public:
    int MOD = 1e9+7; 
    int solveUsingMem ( vector<int> & arr , int index , int totalSum
                        ,int currSum , int d , vector<vector<int> >& dp ) {
         if(index >= arr.size()){
           return (2*currSum - totalSum == d);
        }
        
        if(dp[index][currSum] != -1 ) {
            return dp[index][currSum] ; 
        }
        
        int exclude = solveUsingMem(arr , index + 1 ,totalSum, currSum , d  , dp) ;  
        int include = solveUsingMem(arr , index + 1 ,totalSum , currSum + arr[index] , d , dp ) ; 
        dp[index][currSum] = (exclude + include) % MOD; 
        return dp[index][currSum]  ; 
    }
    int countPartitions(int n, int d, vector<int>& arr) {
        // Code here
        int totalSum = 0 ; 
        for (int i = 0 ; i <  n ; i++ ) totalSum += arr[i] ; 
        
        if(totalSum - d < 0 || (totalSum+d) % 2 ){
            // we cant build ans 
            return 0;
        }
       
        int currSum = 0  ; 
        int index = 0 ; 
        vector<vector<int> > dp (n , vector<int> (totalSum+1 , -1)) ; 
        return solveUsingMem(arr  , index, totalSum , currSum , d , dp ); 
    }
};
-------------------------------------------------------------------------------------------------------------------------------------->
Approach ->

      countPartitions Function:

      This function initializes and prepares the necessary variables and data structures.
      It calculates the totalSum of the array.
      It checks if it's possible to partition the array to meet the required difference d.
      If the partitioning is possible, it initializes a memoization table dp and calls the solveUsingMem function to count the number of ways to partition the array.
      solveUsingMem Function:
      
      This is a recursive function with memoization that calculates the number of ways to partition the array.
      It tries to include or exclude each element of the array in the current subset and recursively calculates the result.
      It uses the memoization table dp to store intermediate results and avoid redundant calculations.
-------------------------------------------------------------------------------------------------------------------------------------->
