-------------------------------------------------------------------------------------------------------------------------------------->
Question -> Merge Sort on Doubly Linked List ??
                                Given Pointer/Reference to the head of a doubly linked list of n nodes, the task is to Sort the given doubly 
                                linked list using Merge Sort in both non-decreasing and non-increasing order.
-------------------------------------------------------------------------------------------------------------------------------------->
Expected Time Complexity: O(nlogn)
Expected Space Complexity: O(logn)
-------------------------------------------------------------------------------------------------------------------------------------->
Example 1:

Input:
n = 8
value[] = {7,3,5,2,6,4,1,8}
Output:
1 2 3 4 5 6 7 8
8 7 6 5 4 3 2 1
Explanation: After sorting the given
linked list in both ways, resultant
matrix will be as given in the first
two line of output, where first line
is the output for non-decreasing
order and next line is for non-
increasing order.
-------------------------------------------------------------------------------------------------------------------------------------->
Example 2:

Input:
n = 5
value[] = {9,15,0,-1,0}
Output:
-1 0 0 9 15
15 9 0 0 -1
Explanation: After sorting the given
linked list in both ways, the
resultant list will be -1 0 0 9 15
in non-decreasing order and 
15 9 0 0 -1 in non-increasing order.
-------------------------------------------------------------------------------------------------------------------------------------->
class Solution {
  public:

    Node* merge(Node* left, Node* right){
        Node* ans = NULL;
        
        if(left->data<right->data){
            ans = left;
            left = left->next;
        }
        else{
            ans = right;
            right = right->next;
        }
        
        Node* tail = ans;
        
        while(left!=NULL && right!=NULL){
            if(left->data<right->data){
                Node* x = left;
                tail->next = x;
                x->prev = tail;
                tail = tail->next;
                left = left->next;
            }
            else{
                Node* x = right;
                tail->next = x;
                x->prev = tail;
                tail = tail->next;
                right = right->next;
            }
        }
        
        while(left!=NULL){
            Node* x = left;
            tail->next = x;
            x->prev = tail;
            tail = tail->next;
            left = left->next;
        }
        
        while(right!=NULL){
            Node* x = right;
            tail->next = x;
            x->prev = tail;
            tail = tail->next;
            right = right->next;
        }
        
        tail->next = NULL;
        return ans;
    }
    
    Node* mergesort(Node* head, int n){
        if(n<=1) return head;
        
        int mid = (n-1)/2;
        
        int i=0;
        Node* temp1 = head;
        while(i<mid){
            temp1 = temp1->next;
            i++;
        }
        Node* temp2 = temp1->next;
        temp1->next = NULL;
        temp2->prev = NULL;
        
        Node* left = mergesort(head, mid+1);
        
        Node* right = mergesort(temp2, n-mid-1);
        
        return merge(left, right);
        
    }
    
    struct Node *sortDoubly(struct Node *head) {
        // Your code here
        int n = 0;
        Node* temp = head;
        while(temp!=NULL){
            n++;
            temp = temp->next;
        }
        
        return mergesort(head, n);
    }
};
-------------------------------------------------------------------------------------------------------------------------------------->
Approach ->
         The given code is for sorting a doubly linked list using merge sort algorithm.
         Let's break down the code and understand it step by step.
         First, we have a function called "mergesort" which takes in two parameters - head of the linked list and the size of the list (n).
         This function will recursively divide the given linked list into smaller sublists until there is only one element left in each sublist.
         Next, we check if n<=1, which means that there is only one element in the current sublist.
         In this case, we simply return the head as it is already sorted.
         If n>1, then we find out the middle index (mid) of our current sublist.
         We use a variable "i" to iterate through our sublist till mid-1 position and reach to temp1 node which will be at mid position after i iterations.
         Then we set temp2 as next node of temp1 and make its previous pointer NULL as it will be used later on while merging two sorted sublists.
         Now, we call mergesort again with two parameters - first half of our current sublist starting from head till mid+1th position (including mid) and second half starting from temp2 till end of our current sublist (excluding mid).
         This process continues until all elements are divided into single-element sublists.
         Once all elements are divided into single-element sublists, now comes merging part where actual sorting happens.
         We call another function called "merge".
         The function takes in two parameters, which are the head nodes of the two lists that need to be merged.
         Firstly, we create a new node called "ans" and initialize it to NULL.
         This will eventually become the head of our merged list.
         Next, we compare the data values of the first nodes in both lists.
         Whichever value is smaller, its corresponding node becomes the first element of our merged list (i.e., ans).
         We then move on to comparing the second elements in both lists and continue this process until one of the lists becomes empty.
         Inside our while loop, we have an if-else statement that checks which data value is smaller between left->data and right->data.
         If left->data is smaller, then we add that node to our merged list by setting tail->next = x (where x is equal to left), and update tail as well as left pointers accordingly.
         Otherwise, if right->data is smaller or equal than left->data, then we do similar steps but with right instead.
         After exiting from this while loop because one of either left or right became NULL (empty), there might still be some remaining elements in either one of these two lists.
         Therefore, after exiting from this while loop for merging purposes only (not for checking whether any pointer has reached NULL yet), we have another set of two more while loops - each responsible for adding all
         The code merges two linked lists in ascending order and returns the head of the merged list.
         The code implements a merge sort algorithm for sorting a doubly linked list.
-------------------------------------------------------------------------------------------------------------------------------------->
