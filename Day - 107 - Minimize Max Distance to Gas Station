-------------------------------------------------------------------------------------------------------------------------------------->
Question -> Minimize Max Distance to Gas Station ??
          We have a horizontal number line. On that number line, we have gas stations at positions stations[0], stations[1], ..., 
          stations[N-1], where n = size of the stations array. Now, we add k more gas stations so that d, the maximum distance 
          between adjacent gas stations, is minimized. We have to find the smallest possible value of d. Find the answer 
          exactly to 2 decimal places.

-------------------------------------------------------------------------------------------------------------------------------------->
Expected Time Complexity: O(log n + k)
Expected Auxiliary Space: O(k)
-------------------------------------------------------------------------------------------------------------------------------------->
Example 1:

Input:
n = 10
stations = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
k = 9
Output: 0.50
Explanation: Each of the 9 stations can be added mid way between all the existing adjacent stations.
-------------------------------------------------------------------------------------------------------------------------------------->
Example 2:

Input:
n = 10
stations = [3,6,12,19,33,44,67,72,89,95] 
k = 2 
Output: 14.00 
Explanation: Construction of gas stations at 8th(between 72 and 89) and 6th(between 44 and 67) locations.
-------------------------------------------------------------------------------------------------------------------------------------->
class Solution {
  public:
    
    double findSmallestMaxDist(vector<int> &stations, int k) {
        // Code here
        int n = stations.size();
        double l = 0, r = 1e8;
        double ans;
        auto check = [&](double mid) -> bool {
            int cnt = 0;
            for (int i = 0; i < n - 1; i++) {
                double dist = stations[i + 1] - stations[i];
                cnt += ceil(dist / mid)-1;
            }
            return cnt <= k;
        };
        while(r-l > 1e-6)
        {
            double mid = (l+r)/2;
            if(check(mid))
            {
                ans = mid;
                r = mid;
            }
            else
            {
                l = mid;
            }
        }
        return ans;
    }
};

-------------------------------------------------------------------------------------------------------------------------------------->
Approach ->
      Certainly! Here's an explanation of the approach used in the provided code for finding the smallest maximum distance between gas stations after adding k new gas stations:

      Objective:
      To minimize the maximum distance between any two adjacent gas stations after adding k new gas stations.
      
      Approach:
      Initialization:
      
      Determine the number of stations n.
      Set the initial search bounds: l (left) is set to 0 and r (right) is set to a large number (1e8). This range covers all possible maximum distances.
      Define a variable ans to store the final answer.
      Check Function:
      
      A lambda function check is defined to determine if a given distance mid can be achieved by adding k or fewer new stations.
      For each segment between two existing stations, calculate how many new stations are needed to ensure that no segment is longer than mid.
      If the total number of new stations required (cnt) is less than or equal to k, return true. Otherwise, return false.
      Binary Search:
      
      Perform binary search on the distance mid between l and r.
      Continue until the difference between r and l is very small (1e-6), ensuring high precision.
      In each iteration, calculate the mid-point mid and use the check function:
      If check(mid) returns true, it means mid is a feasible maximum distance, so update ans to mid and set r to mid.
      If check(mid) returns false, it means mid is too small to be a feasible maximum distance, so set l to mid.
      Return the Result:
      
      After the binary search loop, ans contains the smallest maximum distance achievable with k or fewer new stations.

-------------------------------------------------------------------------------------------------------------------------------------->
